generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  accounts              Account[]
  workspaces            Permission[]
  twoFactorConfirmation TwoFactorConfirmation?
  favoriteViews         ViewFavorite[]
}

model Workspace {
  id          String        @id @default(cuid())
  name        String
  logo        String?
  plan        WorkspacePlan @default(FREE)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  objects     Object[]
  permissions Permission[]
  views       View[]
}

model Permission {
  id          String        @id @default(cuid())
  userId      String
  workspaceId String
  access      WorkspaceRole @default(USER)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([workspaceId])
}

model Object {
  id                    String      @id @default(cuid())
  singular              String
  plural                String
  slug                  String
  type                  ObjectType
  workspaceId           String
  recordTextAttributeId String?
  isStandard            Boolean     @default(false)
  isEnabled             Boolean     @default(true)
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  attributes            Attribute[]
  lists                 List[]
  workspace             Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  records               Record[]
  views                 View[]
  recordTextAttribute   Attribute?  @relation("RecordTextAttribute", fields: [recordTextAttributeId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  @@unique([workspaceId, slug])
  @@index([workspaceId])
  @@index([recordTextAttributeId])
}

model Attribute {
  id                 String           @id @default(cuid())
  name               String
  description        String?
  attributeType      AttributeType
  isSystem           Boolean          @default(false)
  isUnique           Boolean          @default(false)
  isRequired         Boolean          @default(false)
  isEnriched         Boolean          @default(false)
  isReadOnly         Boolean          @default(false)
  isArchived         Boolean          @default(false)
  config             Json?
  defaultValue       Json?
  format             String?
  workspaceId        String
  objectId           String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  object             Object           @relation(fields: [objectId], references: [id], onDelete: Cascade)
  isRecordTextFor    Object[]         @relation("RecordTextAttribute")
  values             AttributeValue[]
  listAttributes     ListAttribute[]
  relatedAsA         RelatedRecord[]  @relation("AttributeARelationship")
  relatedAsB         RelatedRecord[]  @relation("AttributeBRelationship")
  sourceRelationship Relationship?    @relation("SourceRelationship")
  targetRelationship Relationship?    @relation("TargetRelationship")

  @@unique([objectId, name])
  @@index([workspaceId])
  @@index([objectId])
}

model Relationship {
  id                String           @id @default(cuid())
  sourceAttributeId String           @unique
  targetAttributeId String?          @unique
  relationshipType  RelationshipType
  sourceAttribute   Attribute        @relation("SourceRelationship", fields: [sourceAttributeId], references: [id], onDelete: Cascade)
  targetAttribute   Attribute?       @relation("TargetRelationship", fields: [targetAttributeId], references: [id], onDelete: SetNull)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  @@index([sourceAttributeId])
  @@index([targetAttributeId])
}

model Record {
  id          String           @id @default(cuid())
  objectId    String
  workspaceId String
  ownerId     String?
  assigneeId  String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  object      Object           @relation(fields: [objectId], references: [id], onDelete: Cascade)
  values      AttributeValue[]
  lists       ListRecord[]
  relatedAsA  RelatedRecord[]  @relation("RecordARelationship")
  relatedAsB  RelatedRecord[]  @relation("RecordBRelationship")

  @@index([objectId])
  @@index([workspaceId])
  @@index([ownerId])
  @@index([assigneeId])
}

model RelatedRecord {
  id           String   @id @default(cuid())
  recordAId    String
  recordBId    String
  attributeAId String
  attributeBId String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  recordA    Record     @relation("RecordARelationship", fields: [recordAId], references: [id], onDelete: Cascade)
  recordB    Record     @relation("RecordBRelationship", fields: [recordBId], references: [id], onDelete: Cascade)
  attributeA Attribute  @relation("AttributeARelationship", fields: [attributeAId], references: [id], onDelete: Cascade)
  attributeB Attribute? @relation("AttributeBRelationship", fields: [attributeBId], references: [id], onDelete: SetNull)

  @@unique([recordAId, recordBId, attributeAId])
  @@index([recordAId])
  @@index([recordBId])
  @@index([attributeAId])
  @@index([attributeBId])
}

model AttributeValue {
  id          String    @id @default(cuid())
  attributeId String
  recordId    String
  value       Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  record      Record    @relation(fields: [recordId], references: [id], onDelete: Cascade)

  @@unique([attributeId, recordId])
  @@index([attributeId])
  @@index([recordId])
}

model List {
  id          String          @id @default(cuid())
  objectId    String
  name        String
  description String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  object      Object          @relation(fields: [objectId], references: [id], onDelete: Cascade)
  attributes  ListAttribute[]
  records     ListRecord[]
  views       View[]

  @@index([objectId])
}

model ListRecord {
  id        String   @id @default(cuid())
  listId    String
  recordId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  list      List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  record    Record   @relation(fields: [recordId], references: [id], onDelete: Cascade)

  @@unique([listId, recordId])
  @@index([listId])
  @@index([recordId])
}

model ListAttribute {
  id          String    @id @default(cuid())
  listId      String
  attributeId String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  list        List      @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@unique([listId, attributeId])
  @@index([listId])
  @@index([attributeId])
}

model View {
  id            String             @id @default(cuid())
  name          String
  objectId      String
  listId        String?
  workspaceId   String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  list          List?              @relation(fields: [listId], references: [id], onDelete: Cascade)
  object        Object             @relation(fields: [objectId], references: [id], onDelete: Cascade)
  workspace     Workspace          @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  configuration ViewConfiguration?
  favorites     ViewFavorite[]

  @@unique([workspaceId, objectId, name])
  @@unique([workspaceId, listId, name])
  @@index([objectId])
  @@index([listId])
  @@index([workspaceId])
}

model ViewConfiguration {
  id             String   @id @default(cuid())
  viewId         String   @unique
  filters        Json?
  sorts          Json?
  visibleColumns Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  view           View     @relation(fields: [viewId], references: [id], onDelete: Cascade)
}

model ViewFavorite {
  id        String   @id @default(cuid())
  viewId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  view      View     @relation(fields: [viewId], references: [id], onDelete: Cascade)

  @@unique([viewId, userId])
  @@index([viewId])
  @@index([userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model InviteToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum WorkspaceRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum WorkspacePlan {
  FREE
  PLUS
  PRO
  ENTERPRISE
}

enum ObjectType {
  PERSON
  COMPANY
  DEAL
  USER
  WORKSPACE
  CUSTOM
}

enum AttributeType {
  STATUS
  USER
  SELECT
  MULTI_SELECT
  TEXT
  DATETIME
  NUMBER
  CURRENCY
  CHECKBOX
  RATING
  LOCATION
  PHONE_NUMBER
  RECORD
  RELATIONSHIP
  PERSONAL_NAME
  EMAIL_ADDRESS
  INTERACTION
  DOMAIN
}

enum RelationshipType {
  ONE_TO_MANY
  ONE_TO_ONE
  MANY_TO_MANY
  MANY_TO_ONE
}
